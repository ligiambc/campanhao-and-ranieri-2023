#Script used to automate sediment yield calculation for multiple landscapes

#Please refer to the following link to understand how to use this script.
#InVEST (2021) Tutorial: batch processing on Windows. https://invest.readthedocs.io/en/latest/scripting.html

# coding=UTF-8
# -----------------------------------------------
# Generated by InVEST 3.9.0 on Tue Jan  5 20:00:28 2021
# Model: Sediment Delivery Ratio Model (SDR)

import logging
import sys

import natcap.invest.sdr.sdr
import natcap.invest.utils

LOGGER = logging.getLogger(__name__)
root_logger = logging.getLogger()

handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter(
    fmt=natcap.invest.utils.LOG_FMT,
    datefmt='%m/%d/%Y %H:%M:%S ')
handler.setFormatter(formatter)
logging.basicConfig(level=logging.INFO, handlers=[handler])

args = {
    'biophysical_table_path': 'C:/folder/biophysical_table.csv',
    'dem_path': 'C:/folder/dem.tif',
    'drainage_path': '',
    'erodibility_path': 'C:/folder/erodibility.tif',
    'erosivity_path': 'C:/folder/erosivity.tif',
    'ic_0_param': '0.25',
    'k_param': '0.8',
    'lulc_path': 'C:/folder',
    'results_suffix': 'results',
    'sdr_max': '0.8',
    'threshold_flow_accumulation': '150',
    'watersheds_path': 'C:/folder/watershed.shp',
    'workspace_dir': 'C:/folder/outputs'
}

##############################
#  NEUTRAL LANDSCAPE MODELS  #
##############################

#Use this code for landscapes generated using neutral landscape models (NM and NMRiparian)

#Set the values for the arguments ‘percentage’ and ‘roughness’ and the number of landscape replicates (landscapes must have this information in their filenames)

percent = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
roughness = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
numberldcp = list(range(1,101))

#Create a list to store the file paths of your landscapes

lulc = list()

#Use a “for” loop to create the file paths and add them to the list

for p in percent :
    for r in roughness :
        for n in numberldcp :
            landscape = 'C:/folder/landscape_p' + str(p) + '_r' + str(r) + '_' + str(n) + '.tif'
            lulc.append(landscape)

#Update the land use and land cover file and the suffix in the ‘args’ dictionary and run InVEST

for ldcp in lulc :
    args['lulc_path'] = ldcp
    a = ldcp.split('/')
    b = a[3]
    c = b.split('.tif')
    suff = c[0]
    args['results_suffix'] = suff
    if __name__ == '__main__':
        natcap.invest.sdr.sdr.execute(args)

##########################
#  PRIPARIAN LANDSCAPES  #
##########################

#Set the buffer widths (landscapes must have this information in their filenames)

widths = list(range(30, 1050, 30))

#Create a list to store the file paths of your landscapes

lulc = list()

#Use a “for” loop to create the file paths and add them to the list

for w in widths :
    landscape = 'C:/folder/buffer_' + str(w) + '.tif'
    lulc.append(landscape)

#Update the land use and land cover file and the suffix in the ‘args’ dictionary and run InVEST

for ldcp in lulc :
    args['lulc_path'] = ldcp
    a = ldcp.split('/')
    b = a[3]
    c = b.split('.tif')
    suff = c[0]
    args['results_suffix'] = suff
    if __name__ == '__main__':
        natcap.invest.sdr.sdr.execute(args)

############
#  PSLOPE  #
############

#Set the slope ranges (landscapes must have this information in their filenames)

slopes = list(range(1, 64))

#Create a list to store the file paths of your landscapes

lulc = list()

#Use a “for” loop to create the file paths and add them to the list

for s in slopes :
    landscape = 'C:/folder/pslope_' + str(s) + '_to_64' + '.tif'
    lulc.append(landscape)

#Update the land use and land cover file and the suffix in the ‘args’ dictionary and run InVEST

for ldcp in lulc :
    args['lulc_path'] = ldcp
    a = ldcp.split('/')
    b = a[3]
    c = b.split('.tif')
    suff = c[0]
    args['results_suffix'] = suff
    if __name__ == '__main__':
        natcap.invest.sdr.sdr.execute(args)
